{"version":3,"sources":["Components/InputTask.jsx","Components/List.jsx","Components/Filters.jsx","Components/GithubLink.jsx","Components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["InputTask","action","useState","task","setTask","className","type","onChange","event","target","value","name","placeholder","title","onClick","List","list","changeAction","filter","item","status","map","index","key","style","textDecoration","Filters","setFilter","quantity","GithubLink","href","ToDoList","setList","length","checked","taskIndex","findIndex","newList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67026df8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { FaPlusCircle } from 'react-icons/fa';\r\n\r\n\r\nconst InputTask = ({ action }) => {\r\n    const [task, setTask] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\"> To Do List </h1>\r\n\r\n            <input className=\"inputTask\" type=\"text\"\r\n                onChange={(event) => setTask(event.target.value)}\r\n                name=\"input-task\" placeholder=\"Ingrese una tarea\"\r\n                value={task} />\r\n\r\n            <FaPlusCircle\r\n                className=\"plusIcon\"\r\n                title=\"Agregar\"\r\n                onClick={() => {\r\n                    action(task);\r\n                    setTask(\"\");\r\n                }\r\n                } />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputTask\r\n\r\n","import React from 'react'\r\nimport { FaTrash } from 'react-icons/fa';\r\n\r\nconst List = ({ list, action, changeAction, filter }) => {\r\n\r\n    return (\r\n        <div className=\"tasksContainer\"  >\r\n            {list.filter(item => {\r\n                if (filter === null) return true;\r\n\r\n                return item.status === filter;\r\n            })\r\n                .map((item, index) => {\r\n                    return (\r\n                        <div className=\"task\" key={`item-${index}`} >\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    onChange={(event) => changeAction(item, event)}\r\n                                    key={`id-${index}`}\r\n                                    className=\"checkbox\"\r\n                                />\r\n                                <span style={item.status === \"completo\" ? { textDecoration: \"line-through\" } : null}>{item.name}</span>\r\n                            </span>\r\n                            <FaTrash title=\"Eliminar\" onClick={() => action(item.name)} className=\"trashIcon\" />\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\nimport { BsList } from 'react-icons/bs'\r\n\r\nconst Filters = ({ setFilter, quantity }) => {\r\n\r\n    return (\r\n        <div className=\"filtersContainer\">\r\n            <span><sup>{quantity}</sup></span><BsList />\r\n            <button\r\n                className=\"filterBtn filterBtn--blue\"\r\n                onClick={() => setFilter(null)}\r\n            >\r\n                Todas\r\n            </button>\r\n            <button\r\n                className=\"filterBtn filterBtn--red\"\r\n                onClick={() => {\r\n                    setFilter(\"incompleto\")\r\n                }}\r\n            >\r\n                Incompletas\r\n            </button>\r\n            <button\r\n                className=\"filterBtn filterBtn--green\"\r\n                onClick={() => {\r\n                    setFilter(\"completo\")\r\n                }}\r\n            >\r\n                Completas\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filters\r\n","import React from 'react';\r\nimport { FaGithub } from 'react-icons/fa'\r\n\r\nconst GithubLink = () => {\r\n    return (\r\n        <div className=\"github\" title=\"Ir al repositorio\"> <a\r\n            href=\"https://github.com/IrisMazzuca/to-do-list-react\">\r\n            <FaGithub /></a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GithubLink;","import React, { useState } from 'react'\r\nimport InputTask from './InputTask';\r\nimport List from './List';\r\nimport Filters from './Filters';\r\nimport '../style.css';\r\nimport GithubLink from './GithubLink';\r\n\r\n\r\nconst ToDoList = () => {\r\n\r\n    const [list, setList] = useState([]);\r\n    const [filter, setFilter] = useState(null);\r\n\r\n    const addTask = (task) => {\r\n        setList([...list, { name: task, status: 'incompleto' }]);\r\n    };\r\n\r\n    const deleteTask = (task) => {\r\n        setList(list.filter(item => item.name !== task))\r\n    };\r\n\r\n    const changeStatus = (item, event) => {\r\n        const status = (event.target.checked)\r\n            ? item.status = 'completo'\r\n            : item.status = 'incompleto';\r\n\r\n        const taskIndex = list.findIndex(task => task.name === item.name)\r\n        const newList = [...list]\r\n        newList[taskIndex].status = status\r\n\r\n        setList(newList)\r\n    };\r\n\r\n    const quantity = list.length;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <GithubLink />\r\n\r\n            <InputTask list={list} action={addTask} />\r\n\r\n            <List list={list} action={deleteTask} changeAction={changeStatus} filter={filter} />\r\n\r\n            <Filters setFilter={setFilter} quantity={quantity} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n","import React from 'react';\nimport ToDoList from './Components/ToDoList';\n\n\nfunction App() {\n  return (\n    <div>\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}