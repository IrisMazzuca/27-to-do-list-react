{"version":3,"sources":["Components/InputTask.jsx","Components/List.jsx","Components/Filters.jsx","Components/GithubLink.jsx","Components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["InputTask","action","useState","task","setTask","className","type","onChange","event","target","value","name","placeholder","title","onClick","List","list","deleteAction","changeAction","filter","filteredList","item","isChecked","map","index","key","checked","style","textDecoration","Filters","setFilter","quantity","GithubLink","href","ToDoList","setList","length","taskIndex","findIndex","newList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b1151992.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { FaPlusCircle } from 'react-icons/fa';\r\n\r\n\r\nconst InputTask = ({ action }) => {\r\n    const [task, setTask] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\"> To Do List </h1>\r\n\r\n            <input className=\"inputTask\"\r\n                type=\"text\"\r\n                onChange={(event) => setTask(event.target.value)}\r\n                name=\"input-task\"\r\n                placeholder=\"Ingrese una tarea\"\r\n                value={task} />\r\n\r\n            <FaPlusCircle\r\n                className=\"plusIcon\"\r\n                title=\"Agregar\"\r\n                onClick={() => {\r\n                    action(task);\r\n                    setTask(\"\");\r\n                }\r\n                } />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputTask\r\n\r\n","import React from 'react'\r\nimport { FaTrash } from 'react-icons/fa';\r\n\r\nconst List = ({ list, deleteAction, changeAction, filter }) => {\r\n\r\n    const filteredList =\r\n        // the list is filtered according to whether the tasks are completed(checked) or not, then the list is rendered.\r\n        // if the task is checked, a text decoration line-through is added to the style.\r\n        list.filter(item => {\r\n            if (filter === null) return true;\r\n\r\n            return item.isChecked === filter;\r\n        })\r\n            .map((item, index) => {\r\n                return (\r\n                    <div className=\"task\" key={`item-${index}`} >\r\n                        <span>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={item.isChecked}\r\n                                onChange={(event) => changeAction(item, event)}\r\n                                key={`id-${index}`}\r\n                                className=\"checkbox\"\r\n                            />\r\n                            <span style={(item.isChecked)\r\n                                ? { textDecoration: \"line-through\" }\r\n                                : { textDecoration: \"none\" }}>\r\n                                {item.name}\r\n                            </span>\r\n                        </span>\r\n                        <FaTrash title=\"Eliminar\" onClick={() => deleteAction(item.name)} className=\"trashIcon\" />\r\n                    </div>\r\n                )\r\n            });\r\n\r\n    return (\r\n        <div className=\"tasksContainer\"  >\r\n            {filteredList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\nimport { BsList } from 'react-icons/bs'\r\n\r\nconst Filters = ({ setFilter, quantity }) => {\r\n\r\n    return (\r\n        <div className=\"filtersContainer\">\r\n            <span><sup>{quantity}</sup></span><BsList />\r\n            <button\r\n                className=\"filterBtn filterBtn--blue\"\r\n                onClick={() => setFilter(null)}\r\n            >\r\n                Todas\r\n            </button>\r\n            <button\r\n                className=\"filterBtn filterBtn--red\"\r\n                onClick={() => setFilter(false)}\r\n            >\r\n                Incompletas\r\n            </button>\r\n            <button\r\n                className=\"filterBtn filterBtn--green\"\r\n                onClick={() => setFilter(true)}\r\n            >\r\n                Completas\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filters\r\n","import React from 'react';\r\nimport { FaGithub } from 'react-icons/fa'\r\n\r\nconst GithubLink = () => {\r\n    return (\r\n        <div className=\"github\" title=\"Ir al repositorio\"> <a\r\n            href=\"https://github.com/IrisMazzuca/to-do-list-react\">\r\n            <FaGithub /></a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GithubLink;","import React, { useState } from 'react'\r\nimport InputTask from './InputTask';\r\nimport List from './List';\r\nimport Filters from './Filters';\r\nimport '../style.css';\r\nimport GithubLink from './GithubLink';\r\n\r\n// Parent component \r\nconst ToDoList = () => {\r\n    // the list has all the tasks the user add. I added some tasks by default.\r\n    const [list, setList] = useState([{ name: \"ðŸ‘‰ Ir al supermerado\", isChecked: false }, { name: \"ðŸ‘‰ Ir a la farmacia\", isChecked: true }, { name: \"ðŸ‘‰ Comprar regalos\", isChecked: false }]);\r\n\r\n    // filter will be used by List and Filters components. Its value can be null - true or false, and it will be use to filter the tasks according if they are checked (completed) or not.\r\n    const [filter, setFilter] = useState(null);\r\n\r\n    // I copied the original list and then I applied the filter, in order to be able to get the length of the filtered list (saving the value inside the variable \"quantity\"):\r\n    const copiedList = [...list]\r\n\r\n    const filteredList = copiedList.filter(item => {\r\n        if (filter === null) return true;\r\n\r\n        return item.isChecked === filter;\r\n    });\r\n\r\n    const quantity = filteredList.length;\r\n\r\n    // onClick function addTask is sent as a prop to the InputTask component. By clicking the plusIcon, a new task is added and list value is updated.\r\n    const addTask = (task) => {\r\n        setList([...list, { name: task, isChecked: false }]);\r\n    };\r\n\r\n    // onClick function deleteTask is sent as a prop to the List component. By clicking the trashIcon, the task is deleted.\r\n    const deleteTask = (task) => {\r\n        setList(list.filter(item => item.name !== task))\r\n    };\r\n\r\n    // onChange function changeStatus is sent as a prop to the List component. It update the value of isChecked -> it the checkbox is checked, the value will be true, otherwise it will be false.\r\n    const changeStatus = (item, event) => {\r\n        const isChecked = (event.target.checked)\r\n            ? item.isChecked = true\r\n            : item.isChecked = false;\r\n\r\n        //Here we get the index of the task where the event has taken place.\r\n        const taskIndex = list.findIndex(task => task.name === item.name)\r\n        const newList = [...list] //newList is a copy of list.\r\n        newList[taskIndex].isChecked = isChecked //Here we change isChecked value (in newList)\r\n\r\n        setList(newList) //list value updated with setList\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <GithubLink />\r\n\r\n            <InputTask list={list} action={addTask} />\r\n\r\n            <List list={list} deleteAction={deleteTask} changeAction={changeStatus} filter={filter} />\r\n\r\n            <Filters setFilter={setFilter} quantity={quantity} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n","import React from 'react';\nimport ToDoList from './Components/ToDoList';\n\n\nfunction App() {\n  return (\n    <div>\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}